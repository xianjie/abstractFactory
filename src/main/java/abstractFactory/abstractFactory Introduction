简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。顾名思义工厂就是生产东西的，有原料（参数），模子（对象）就能生产出很多个具有相同功能的对象啦。
简单工厂模式，我把它理解为一个模子，根据外界给定的原料，在加上自身封装好的判断，生产出不同类型的相应的产品、对象。
简单工厂模式使用场景：工厂类负责创建的对象比较少；客户只知道传入工厂类的参数，对于如何创建对象（逻辑）不关心；
简单工厂很容易违反高内聚低耦合原则，因此一般只在很简单的情况下应用。






抽象工厂模式（英语：Abstract Factory）是一种常见的设计模式。
此模式为一个产品家族提供了统一的创建接口。
当需要这个产品家族的某一系列的时候，可以从抽象工厂中选出相对系的系列来创建一个具体的工厂类别。

假设我们有两种产品接口 Button 和 Border ，每一种产品都支持多种系列，比如 Mac 系列和 Windows 系列。
这样每个系列的产品分别是 MacButton, WinButton, MacBorder, WinBorder 。
为了可以在运行时刻创建一个系列的产品族，我们可以为每个系列的产品族建立一个工厂 MacFactory 和 WinFactory 。
每个工厂都有两个方法 CreateButton 和 CreateBorder 并返回对应的产品，可以将这两个方法抽象成一个接口 AbstractFactory 。
这样在运行时刻我们可以选择创建需要的产品系列